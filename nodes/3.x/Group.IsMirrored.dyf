{
  "Uuid": "e4c1f6b1-1a30-446d-bccb-e23a973c1a08",
  "IsCustomNode": true,
  "Category": "Clockwork.Revit.Elements.Query",
  "Description": "Checks if a list of group instances have been mirrored. The reference group should usually be the first placed instance of the group (since that one has likely not been mirrored).  The node will return null for group instances of other group types than the reference group as well as for group instances with excluded members. Furthermore, it will return null for *all* groups if the reference group itself has excluded members or if it doesn't contain any loadable families (since they are the only way of determining if the group instance has been mirrored). The node will likely report null for group instances where members have been excluded but subsequently been restored.",
  "Name": "Group.IsMirrored",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "import clr\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\nrefgroup = UnwrapElement(IN[0])\r\ngroups = UnwrapElement(IN[1])\r\nversion = IN[2]\r\n\r\n# Get Mirrored state of first family instance in reference group instance\r\nrefGroupMembers = refgroup.GetMemberIds()\r\nnumMembers = len(refGroupMembers)\r\ncounter = 0\r\nmembernum = None\r\nif version > 2024: refGroupType = refgroup.GroupType.Id.Value\r\nelse: refGroupType = refgroup.GroupType.Id.IntegerValue\r\nfor member in refGroupMembers:\r\n    elem = refgroup.Document.GetElement(member)\r\n    if elem.GetType().ToString() == \"Autodesk.Revit.DB.FamilyInstance\":\r\n        state = elem.Mirrored\r\n        membernum = counter\r\n        if version > 2024: famtype = elem.GetTypeId().Value\r\n        else: famtype = elem.GetTypeId().IntegerValue\r\n        break\r\n    counter += 1\r\n    \r\n# Default values for flags\r\nrefGroupIntact = True\r\nnoFamInsts = False\r\n# Set a flag if the reference group contains no family instances\r\nif membernum == None: noFamInsts = True\r\nelse:\r\n    bools = []\r\n    # Compare Mirrored state with corresponding members of other group instances\r\n    for group in groups:\r\n        # Get number of group members\r\n        theseMembers = group.GetMemberIds()\r\n        theseMembersNum = len(theseMembers)\r\n        # get IDs for comparison\r\n        if version > 2024: \r\n            gtid = group.GroupType.Id.Value\r\n            ftypeid = group.Document.GetElement(theseMembers[membernum]).GetTypeId().Value\r\n        else: \r\n            gtid = group.GroupType.Id.IntegerValue\r\n            ftypeid = group.Document.GetElement(theseMembers[membernum]).GetTypeId().IntegerValue\r\n        # Set a flag if any group instance has more members than the reference group instance\r\n        # (only if both are of the same group type)\r\n        if theseMembersNum > numMembers and refGroupType == gtid:\r\n            refGroupIntact = False\r\n            break\r\n        # Return null if group is of another group type\r\n        elif refGroupType != gtid: bools.append(None)\r\n        # Return null for group instances with excluded members\r\n        elif theseMembersNum < numMembers: bools.append(None)\r\n        # Return null if family instance to compare if of a diffent type\r\n        elif ftypeid != famtype: bools.append(None)\r\n        # Otherwise compare Mirrored state\r\n        else: bools.append(group.Document.GetElement(theseMembers[membernum]).Mirrored != state)\r\n            \r\n# Return null for all groups if the first group has excluded members\r\n# or if it does not contain any fanily instances\r\nif not refGroupIntact or noFamInsts: bools = [None] * len(groups)\r\n    \r\nOUT = bools",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "8ea9b94c81574310a87ff9d3e02a3649",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "9faa31f755cf4d828f2ec88acb3c7304",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f2538c8d09f347e08caa760dd67b6149",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d376a02a29554108abe51d3c1329e236",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0108eb44d35044a9ba0a2614fe6c44a7",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "Parameter": {
        "Name": "referenceGroup",
        "TypeName": "var",
        "TypeRank": 0,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "3f0ac3ecd63f4f40971bcfcaf7ebba5e",
      "NodeType": "InputNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5902668f1e3d416e8cbad59a21d92a01",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "Parameter": {
        "Name": "groupsToCheck",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "eb6d1c779dac4bd28a9e9f35500bf40c",
      "NodeType": "InputNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "57bc1aef79bf41dea42862cd58614c78",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "ElementResolver": null,
      "Symbol": "bool",
      "Id": "a8c846c2b30c46cba1887d3198bfd6fb",
      "NodeType": "OutputNode",
      "Inputs": [
        {
          "Id": "83437c1518074158b3665f0ba09fddc0",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "3df0961d-9d46-464f-9175-0a74eeb61bc1",
      "FunctionType": "Graph",
      "Id": "958c95470e2a43ad9df238d724969d16",
      "NodeType": "FunctionNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b220ab33143944dab33bb5c9d3ed0634",
          "Name": "Name",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4caa31b015e1413494b2066ac1bd149b",
          "Name": "Version",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4dc6e15dcaa143248db2733c32d954a9",
          "Name": "Build",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "00f4f4ef59334f4da653f6d20351f8c4",
          "Name": "Language",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "91224a75016f4724a6db852b7439dee4",
          "Name": "fullVersion",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Retrieves the name, version and build of the current Revit application."
    }
  ],
  "Connectors": [
    {
      "Start": "0108eb44d35044a9ba0a2614fe6c44a7",
      "End": "83437c1518074158b3665f0ba09fddc0",
      "Id": "8586f312966344fcbb4419a32e3c68bc",
      "IsHidden": "False"
    },
    {
      "Start": "5902668f1e3d416e8cbad59a21d92a01",
      "End": "9faa31f755cf4d828f2ec88acb3c7304",
      "Id": "e88f3bf990ca45598bf8bbf2e5d9e250",
      "IsHidden": "False"
    },
    {
      "Start": "57bc1aef79bf41dea42862cd58614c78",
      "End": "f2538c8d09f347e08caa760dd67b6149",
      "Id": "5db8c33eb1924480b087d849ba63498e",
      "IsHidden": "False"
    },
    {
      "Start": "4caa31b015e1413494b2066ac1bd149b",
      "End": "d376a02a29554108abe51d3c1329e236",
      "Id": "8ee49959d0e942af881364098e72aa86",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [
    "3df0961d-9d46-464f-9175-0a74eeb61bc1"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "Clockwork for Dynamo 2.x",
      "Version": "2.12.2",
      "ReferenceType": "Package",
      "Nodes": [
        "958c95470e2a43ad9df238d724969d16"
      ]
    }
  ],
  "Author": "None provided",
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "3.4.1.7055",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "_Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Id": "8ea9b94c81574310a87ff9d3e02a3649",
        "Name": "Python Script",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 361.08468337958686,
        "Y": 107.53055286677358
      },
      {
        "Id": "3f0ac3ecd63f4f40971bcfcaf7ebba5e",
        "Name": "Input",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 10.684683379586886,
        "Y": -17.469447133226424
      },
      {
        "Id": "eb6d1c779dac4bd28a9e9f35500bf40c",
        "Name": "Input",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 10.684683379586886,
        "Y": 130.53055286677358
      },
      {
        "Id": "a8c846c2b30c46cba1887d3198bfd6fb",
        "Name": "Output",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 635.4846833795868,
        "Y": 107.53055286677358
      },
      {
        "Id": "958c95470e2a43ad9df238d724969d16",
        "Name": "Application.Version",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 10.684683379586886,
        "Y": 277.5305528667736
      }
    ],
    "Annotations": [],
    "X": 177.11097354159955,
    "Y": 241.73125888747091,
    "Zoom": 0.9979447222055915
  }
}