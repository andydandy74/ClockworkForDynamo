{
  "Uuid": "0b59c4d8-afe4-4063-bf7e-2195fa33e8a9",
  "IsCustomNode": true,
  "Category": "Clockwork.Revit.Elements.Query",
  "Description": "Returns the location of an element as point, curve or curve loop, along with some booleans to help filtering the results. Unlike the OOTB Element.GetLocation node, it also returns sketch lines of sketch-based elements like floor slabs as well as the element's rotation property. Additionally, it supports quite a few more element types (e.g. railings, stairs etc.).",
  "Name": "Element.Location+",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "Parameter": {
        "Name": "element",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "467e3f8f3faf49fc94c376b1b0c59c5e",
      "NodeType": "InputNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "151fd7b3751e42dfb48f0bf861945420",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "ElementResolver": null,
      "Symbol": "points",
      "Id": "3ebf8af890b744f8afdf742ff53b9f65",
      "NodeType": "OutputNode",
      "Inputs": [
        {
          "Id": "ce28f947353e4097aa86f9eedb33dc8a",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "ElementResolver": null,
      "Symbol": "curveEndpoints",
      "Id": "fe6d5941e75240bbb243e86bdd061ab9",
      "NodeType": "OutputNode",
      "Inputs": [
        {
          "Id": "acfd389bde154419902a417e7067135b",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "ElementResolver": null,
      "Symbol": "curves",
      "Id": "fef50bd5ee4646bbbc91c1d356b52c80",
      "NodeType": "OutputNode",
      "Inputs": [
        {
          "Id": "07a32867e8244ba9ba10d988aeb17c43",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "ElementResolver": null,
      "Symbol": "isPoint",
      "Id": "9c5fe234633342d18497fa4ae9ff0a2d",
      "NodeType": "OutputNode",
      "Inputs": [
        {
          "Id": "cc3a3b21cb1d4ba0a21407e49b46ce69",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "ElementResolver": null,
      "Symbol": "isCurve",
      "Id": "21d345193cea4d3fb917cbe99953d0f1",
      "NodeType": "OutputNode",
      "Inputs": [
        {
          "Id": "8e2a6c9b3bda4b34abe9bcdb5727ea6b",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "Id": "bd3f39ee762e4a88a57d373694197124",
      "NodeType": "CodeBlockNode",
      "Inputs": [
        {
          "Id": "3efff19511414bb19f3968cf41c13ff6",
          "Name": "seq",
          "Description": "seq",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6d19137c552d4a54ba0707f1b337ae6a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "50dc7c5b09d14c4d92dc64f6d7f728bf",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2359a0bed1a54d3da5d9cc31e3bd3c74",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "238ad0fcdb624437aac280a9a5ae4042",
          "Name": "",
          "Description": "Value of expression at line 4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bada9fa2945c40d59f11a2b396933569",
          "Name": "",
          "Description": "Value of expression at line 5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "99a469f67023402fa74f8f7f55d55be1",
          "Name": "",
          "Description": "Value of expression at line 6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "63dc658e1a644b4fb690d2d798ba45d5",
          "Name": "",
          "Description": "Value of expression at line 7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "315f66f983d64c77b835bd47d086106c",
          "Name": "",
          "Description": "Value of expression at line 8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7e631bc2379849b5abd375159766a092",
          "Name": "",
          "Description": "Value of expression at line 9",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "332fc0d26f344b82a5f3ad7c55f151d1",
          "Name": "",
          "Description": "Value of expression at line 10",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly",
      "Code": "seq[0];\nseq[1];\nseq[2];\nseq[3];\nseq[4];\nseq[5];\nseq[6];\nseq[7];\nseq[8];\nseq[9];"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "import clr\r\nimport math\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nitems = UnwrapElement(IN[0])\r\n\r\ndef GetCurvePoints(curve):\r\n    return curve.GetEndPoint(0).ToPoint(), curve.GetEndPoint(1).ToPoint()\r\n\r\ndef GetLocation(item):\r\n    # returns the following properties:\r\n    # [0] point\r\n    # [1] curve\r\n    # [2] is point?\r\n    # [3] is curve?\r\n    # [4] has location?\r\n    # [5] rotation angle\r\n    # [6] has rotation?\r\n    # [7] is curve loop?\r\n    # [8] curve loop\r\n    # default values\r\n    point = None\r\n    curveendpoints = None\r\n    curve = None\r\n    ispoint = False\r\n    iscurve = False\r\n    haslocation = False\r\n    rotationangle = None\r\n    hasrotation = False\r\n    iscurveloop = False\r\n    curveloop = None\r\n    # template for return statements:\r\n    # return point, curveendpoints, curve, ispoint, iscurve, haslocation, rotationangle, hasrotation, iscurveloop, curveloop\r\n    # FabricationConfiguration objects will produce an error further down if we don't exit here\r\n    if hasattr(item, \"AncillaryExists\"):\r\n        return point, curveendpoints, curve, ispoint, iscurve, haslocation, rotationangle, hasrotation, iscurveloop, curveloop\r\n    # points and text notes\r\n    if hasattr(item, \"Coord\"): \r\n        return item.Coord.ToPoint(), curveendpoints, curve, True, iscurve, True, rotationangle, hasrotation, iscurveloop, curveloop\r\n    # base points and reference points\r\n    if hasattr(item, \"Position\"): \r\n        return item.Position.ToPoint(), curveendpoints, curve, True, iscurve, True, rotationangle, hasrotation, iscurveloop, curveloop\r\n    # independent tags\r\n    if hasattr(item, \"TagHeadPosition\") and hasattr(item, \"IsMaterialTag\"): \r\n        return item.TagHeadPosition.ToPoint(), curveendpoints, curve, True, iscurve, True, rotationangle, hasrotation, iscurveloop, curveloop\r\n    # views\r\n    if hasattr(item, \"ViewType\") and hasattr(item, \"Origin\"): \r\n        ori = item.Origin\r\n        if ori: return ori.ToPoint(), curveendpoints, curve, True, iscurve, True, rotationangle, hasrotation, iscurveloop, curveloop\r\n        else: return point, curveendpoints, curve, ispoint, iscurve, haslocation, rotationangle, hasrotation, iscurveloop, curveloop\r\n    # stair runs and landings\r\n    if hasattr(item, \"GetFootprintBoundary\"):\r\n        footprint = [x.ToProtoType() for x in item.GetFootprintBoundary()]\r\n        return point, curveendpoints, curve, ispoint, iscurve, True, rotationangle, hasrotation, True, footprint\r\n    # grids, dimensions and boundary segments\r\n    elif hasattr(item, \"Curve\"):\r\n        tempcurve = item.Curve\r\n        if not tempcurve.IsBound: tempcurve.MakeBound(0,1) \r\n        return point, GetCurvePoints(tempcurve), tempcurve.ToProtoType(), ispoint, True, True, rotationangle, hasrotation, iscurveloop, curveloop \r\n    # curtain grid lines\r\n    elif hasattr(item, \"FullCurve\"):\r\n        tempcurve = item.FullCurve\r\n        if not tempcurve.IsBound: tempcurve.MakeBound(0,1) \r\n        return point, GetCurvePoints(tempcurve), tempcurve.ToProtoType(), ispoint, True, True, rotationangle, hasrotation, iscurveloop, curveloop\r\n    # curves\r\n    elif hasattr(item, \"GetEndpoint\"): \r\n        tempcurve = item\r\n        if not tempcurve.IsBound: tempcurve.MakeBound(0,1) \r\n        return point, GetCurvePoints(tempcurve), tempcurve.ToProtoType(), ispoint, True, True, rotationangle, hasrotation, iscurveloop, curveloop\r\n    # railings and top rails\r\n    elif hasattr(item, \"GetPath\"):\r\n        railpath = []\r\n        for x in item.GetPath():\r\n            try: railpath.append(x.ToProtoType())\r\n            except: pass\r\n        # paths with multiple segments\r\n        if len(railpath) > 1: return point, curveendpoints, curve, ispoint, iscurve, True, rotationangle, hasrotation, True, railpath\r\n        # paths with a single segment\r\n        elif len(railpath) == 1: return point, GetCurvePoints(railpath[0].ToRevitType()), railpath[0], ispoint, True, True, rotationangle, hasrotation, iscurveloop, curveloop\r\n        # paths without legible segments\r\n        else: return point, curveendpoints, curve, ispoint, iscurve, haslocation, rotationangle, hasrotation, iscurveloop, curveloop\r\n    # openings\r\n    elif hasattr(item, \"BoundaryCurves\"):\r\n        # rectangular openings\r\n        if item.IsRectBoundary:\r\n            zVals = [x.Z for x in item.BoundaryRect]\r\n            p = []\r\n            for o in item.BoundaryRect:\r\n                for z in zVals: p.append(XYZ(o.X, o.Y, z).ToPoint())\r\n            rectloop = Rectangle.ByCornerPoints(p[0], p[1], p[3], p[2]).Explode()\r\n            return point, curveendpoints, curve, ispoint, iscurve, True, rotationangle, hasrotation, True, rectloop\r\n        # none-rectangular openings\r\n        else: \r\n            openingloop = [x.ToProtoType() for x in item.BoundaryCurves]\r\n            return point, curveendpoints, curve, ispoint, iscurve, True, rotationangle, hasrotation, True, openingloop\r\n    # extrusion roofs\r\n    elif hasattr(item, \"GetProfile\"):\r\n        sketchloop = [x.GeometryCurve.ToProtoType() for x in item.GetProfile()]\r\n        return point, curveendpoints, curve, ispoint, iscurve, True, rotationangle, hasrotation, True, sketchloop\r\n    # newer sketch-based elements (except walls)\r\n    elif hasattr(item, \"SketchId\") and not hasattr(item, \"WallType\"):\r\n        sketch = item.Document.GetElement(item.SketchId)\r\n        if sketch:\r\n            sketchloop = []\r\n            for loop in sketch.Profile:\r\n                sketchloop.append([x.ToProtoType() for x in loop])\r\n            return point, curveendpoints, curve, ispoint, iscurve, True, rotationangle, hasrotation, True, sketchloop\r\n        else: return point, curveendpoints, curve, ispoint, iscurve, haslocation, rotationangle, hasrotation, iscurveloop, curveloop\r\n    # other elements\r\n    elif hasattr(item, \"Location\"):\r\n        loc = item.Location\r\n        if loc:\r\n            # line-based elements (e.g. walls)\r\n            if loc.ToString() == 'Autodesk.Revit.DB.LocationCurve':\r\n                tempcurve = loc.Curve\r\n                if not tempcurve.IsBound: tempcurve.MakeBound(0,1) \r\n                try: return point, GetCurvePoints(tempcurve), tempcurve.ToProtoType(), ispoint, True, True, rotationangle, hasrotation, iscurveloop, curveloop\r\n                # return super short curves as startpoint instead\r\n                except: return GetCurvePoints(loc.Curve)[0], curveendpoints, curve, True, iscurve, True, rotationangle, hasrotation, iscurveloop, curveloop\r\n            # point-based elements (e.g. most loadable families)\r\n            elif loc.ToString() == 'Autodesk.Revit.DB.LocationPoint':\r\n                try:\r\n                    if hasattr(loc, \"Rotation\"):\r\n                        rotationangle = math.degrees(loc.Rotation)\r\n                        hasrotation = True\r\n                except: pass\r\n                return loc.Point.ToPoint(), curveendpoints, curve, True, iscurve, True, rotationangle, hasrotation, iscurveloop, curveloop\r\n            # some elements have a location property but don't return curves or points\r\n            else:\r\n                # earlier sketch-based elements (e.g. floor slabs)\r\n                try:\r\n                    sketchloop = []\r\n                    for ref in HostObjectUtils.GetTopFaces(item):\r\n                        geomref = item.GetGeometryObjectFromReference(ref)\r\n                        if geomref: \r\n                            boundaryloops = geomref.GetEdgesAsCurveLoops()\r\n                            for loop in boundaryloops:\r\n                                sketchloop.append([x.ToProtoType() for x in loop])\r\n                    return point, curveendpoints, curve, ispoint, iscurve, True, rotationangle, hasrotation, True, sketchloop\r\n                # other elements we can't process\r\n                # return defaults in these cases\r\n                except:\r\n                    return point, curveendpoints, curve, ispoint, iscurve, haslocation, rotationangle, hasrotation, iscurveloop, curveloop\r\n        # some elements (e.g.groups, curtain panels etc.)  have a location property which only returns a NoneType\r\n        # return defaults in these cases\r\n        else: return point, curveendpoints, curve, ispoint, iscurve, haslocation, rotationangle, hasrotation, iscurveloop, curveloop\r\n    # in all other cases return defaults\r\n    else: return point, curveendpoints, curve, ispoint, iscurve, haslocation, rotationangle, hasrotation, iscurveloop, curveloop\r\n\r\nif isinstance(IN[0], list):\r\n    locations = [GetLocation(x) for x in items]\r\n    # Transpose and remove NoneTypes\r\n    OUT = []\r\n    for prop in map(list, zip(*locations)):\r\n        OUT.append(filter(lambda x: x!=None, prop))\r\nelse: OUT = GetLocation(items)",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "f9cf6ebe4cb643a4b682f29bf6633963",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "a1090d92f4814cb2b1c696be6c2cf96a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ef2e39491c664c6f86d6679780484e8e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "ElementResolver": null,
      "Symbol": "hasLocation",
      "Id": "f049edbfdc904d9d8d55aec33858083d",
      "NodeType": "OutputNode",
      "Inputs": [
        {
          "Id": "e99545ffba554159bf2034b15fd27eb8",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "ElementResolver": null,
      "Symbol": "angle",
      "Id": "14d49b055d404fbfb0e471bfaaee0839",
      "NodeType": "OutputNode",
      "Inputs": [
        {
          "Id": "61042d1e93d24d2397fe9029b403c1fe",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "ElementResolver": null,
      "Symbol": "hasRotation",
      "Id": "83ee1aeff7984e808bef4ac8b8479804",
      "NodeType": "OutputNode",
      "Inputs": [
        {
          "Id": "6defd60ce85846f08cf11318b85065c5",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "ElementResolver": null,
      "Symbol": "hasMulipleCurves",
      "Id": "fb7fb1a9d08642a290350bff90c87fb6",
      "NodeType": "OutputNode",
      "Inputs": [
        {
          "Id": "eaf4f71866ba433a8e94112521094a34",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "ElementResolver": null,
      "Symbol": "mulipleCurves",
      "Id": "b813a1a842eb4e06ae62ecc7b85490cf",
      "NodeType": "OutputNode",
      "Inputs": [
        {
          "Id": "f2056dbd03d54b75a101dbb7d3ff2398",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    }
  ],
  "Connectors": [
    {
      "Start": "151fd7b3751e42dfb48f0bf861945420",
      "End": "a1090d92f4814cb2b1c696be6c2cf96a",
      "Id": "893b3bcfb5ce4b0487ec42701f6c98b2",
      "IsHidden": "False"
    },
    {
      "Start": "6d19137c552d4a54ba0707f1b337ae6a",
      "End": "ce28f947353e4097aa86f9eedb33dc8a",
      "Id": "4e7ae3331f2648389e74fe1e039920b5",
      "IsHidden": "False"
    },
    {
      "Start": "50dc7c5b09d14c4d92dc64f6d7f728bf",
      "End": "acfd389bde154419902a417e7067135b",
      "Id": "cf7046093ad74566be1957b7af1d1e87",
      "IsHidden": "False"
    },
    {
      "Start": "2359a0bed1a54d3da5d9cc31e3bd3c74",
      "End": "07a32867e8244ba9ba10d988aeb17c43",
      "Id": "754b3171d0864f3887097ce3ef21d899",
      "IsHidden": "False"
    },
    {
      "Start": "238ad0fcdb624437aac280a9a5ae4042",
      "End": "cc3a3b21cb1d4ba0a21407e49b46ce69",
      "Id": "acded66378f5436b9049de00156e335b",
      "IsHidden": "False"
    },
    {
      "Start": "bada9fa2945c40d59f11a2b396933569",
      "End": "8e2a6c9b3bda4b34abe9bcdb5727ea6b",
      "Id": "07adeb99f5574970a308b3293ad3dcc9",
      "IsHidden": "False"
    },
    {
      "Start": "99a469f67023402fa74f8f7f55d55be1",
      "End": "e99545ffba554159bf2034b15fd27eb8",
      "Id": "2538ccf641694b43924ac1396ff4d857",
      "IsHidden": "False"
    },
    {
      "Start": "63dc658e1a644b4fb690d2d798ba45d5",
      "End": "61042d1e93d24d2397fe9029b403c1fe",
      "Id": "1df0a0fbe2f044a7986f0aea7bbacf63",
      "IsHidden": "False"
    },
    {
      "Start": "315f66f983d64c77b835bd47d086106c",
      "End": "6defd60ce85846f08cf11318b85065c5",
      "Id": "009b395e35ca42f0af7ae932fa9954da",
      "IsHidden": "False"
    },
    {
      "Start": "7e631bc2379849b5abd375159766a092",
      "End": "eaf4f71866ba433a8e94112521094a34",
      "Id": "6c0149e602834d07ad79dc8630e11f2d",
      "IsHidden": "False"
    },
    {
      "Start": "332fc0d26f344b82a5f3ad7c55f151d1",
      "End": "f2056dbd03d54b75a101dbb7d3ff2398",
      "Id": "8fd7f0292a1b46d89e5d2f255a5a1ab7",
      "IsHidden": "False"
    },
    {
      "Start": "ef2e39491c664c6f86d6679780484e8e",
      "End": "3efff19511414bb19f3968cf41c13ff6",
      "Id": "604e1ffb023a4b188a4c7ad063a8cef8",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Author": "None provided",
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "3.3.0.6316",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "_Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Id": "467e3f8f3faf49fc94c376b1b0c59c5e",
        "Name": "Input",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": -100.81953541504106,
        "Y": 138.01639070830083
      },
      {
        "Id": "3ebf8af890b744f8afdf742ff53b9f65",
        "Name": "Output",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 829.411443410782,
        "Y": -13.753237059281
      },
      {
        "Id": "fe6d5941e75240bbb243e86bdd061ab9",
        "Name": "Output",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 829.411443410782,
        "Y": 42.1780581895263
      },
      {
        "Id": "fef50bd5ee4646bbbc91c1d356b52c80",
        "Name": "Output",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 829.411443410782,
        "Y": 98.1093534383336
      },
      {
        "Id": "9c5fe234633342d18497fa4ae9ff0a2d",
        "Name": "Output",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 829.411443410782,
        "Y": 154.040648687141
      },
      {
        "Id": "21d345193cea4d3fb917cbe99953d0f1",
        "Name": "Output",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 829.411443410782,
        "Y": 209.971943935948
      },
      {
        "Id": "bd3f39ee762e4a88a57d373694197124",
        "Name": "Code Block",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 551.355185870988,
        "Y": 139.870950208536
      },
      {
        "Id": "f9cf6ebe4cb643a4b682f29bf6633963",
        "Name": "Python Script",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 256.9340128708749,
        "Y": 139.08530042928237
      },
      {
        "Id": "f049edbfdc904d9d8d55aec33858083d",
        "Name": "Output",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 829.411443410782,
        "Y": 265.903239184756
      },
      {
        "Id": "14d49b055d404fbfb0e471bfaaee0839",
        "Name": "Output",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 829.411443410782,
        "Y": 321.834534433563
      },
      {
        "Id": "83ee1aeff7984e808bef4ac8b8479804",
        "Name": "Output",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 829.411443410782,
        "Y": 377.76582968237
      },
      {
        "Id": "fb7fb1a9d08642a290350bff90c87fb6",
        "Name": "Output",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 830.2722891838747,
        "Y": 435.0690577859353
      },
      {
        "Id": "b813a1a842eb4e06ae62ecc7b85490cf",
        "Name": "Output",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 829.7069765411462,
        "Y": 502.3722858895006
      }
    ],
    "Annotations": [],
    "X": 425.33977492623535,
    "Y": 112.76110056024203,
    "Zoom": 0.7778821074349163
  }
}